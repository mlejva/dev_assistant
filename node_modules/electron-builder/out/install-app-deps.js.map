{
  "version": 3,
  "file": "install-app-deps.js",
  "sourceRoot": "",
  "sources": [
    "../src/install-app-deps.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;sEAkBA,AAAK;AACH,cAAM,AAAW,cAAgB,MAAM,AAAe,mEAAC,AAAc,AAAC;AACtE,cAAM,AAAO,UAAkB,MAAM,AAAe,kDAAC,AAAG,6DAC3B,AAAU,6CAAM,AAAW,YAAC,AAAW;AAAE,AAAE,mBAAI,AAAG,GAAC,AAAG,AAAC,AAAC;SAA5C,AAAG,CAA1C,AAA0B,CAD6B,EAEvD,AAAkB,gDAAC,AAAW,aAAE,AAAc,AAAC,AAChD,AAAC;AAEF,AAAE,AAAC,YAAC,AAAO,QAAC,AAAC,AAAC,OAAK,AAAU,AAAC,YAAC,AAAC;AAC9B,kBAAM,IAAI,AAAK,MAAC,AAAgE,AAAC,AACnF;AAAC;AAED,cAAM,AAAmB,iDAAC,AAAO,QAAC,AAAC,AAAC,IAAE,AAAO,QAAC,AAAC,AAAC,IAAE,AAAI,KAAC,AAAI,MAAE,AAAW,YAAC,AAAK,MAAC,AAAsB,2BAAK,AAAI,AAAC,AACjH;AAAC;;;;;;;;;AA5BD,AAAO,AAAE,AAA0B,AAAE,AAAmB,AAAE,AAAkB,AAAE,AAAG,AAAE,AAAM,AAAa;;;;;;AACtG,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAgB;;;;;;AAClD,AAAO,AAAK,AAAI,AAAM,AAAM,AAC5B,AAAO,AAAe,AAAM,AAAgB;;;;;;AAE5C,AAAO,AAAK,AAAM,AAAO;;;;;;AACzB,AAAO,AAAE,AAAe,AAAE,AAAM,AAAwB;;;;;;;;AAExD,MAAM,AAAI,yCACP,AAAM,OAAC,AAAM;AACZ,AAAO,aAAE,CAAC,AAAM,QAAE,AAAK,OAAE,AAAK,AAAC,AAChC,AAAC;AAFc,CADA,AAAK,EAGlB,AAAI;AAET,MAAM,AAAU,aAAG,AAAO,QAAC,AAAG,AAAE;AAChC,MAAM,AAAc,iBAAG,AAAI,wBAAC,AAAI,KAAC,AAAU,YAAE,AAAc,AAAC;;AAgB5D,AAAI,AAAE,OACH,AAAK,AAAC,AAAiB,AAAC",
  "sourcesContent": [
    "#! /usr/bin/env node\n\nimport { computeDefaultAppDirectory, installDependencies, getElectronVersion, use } from \"./util/util\"\nimport { printErrorAndExit } from \"./util/promise\"\nimport * as path from \"path\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { DevMetadata } from \"./metadata\"\nimport yargs from \"yargs\"\nimport { readPackageJson } from \"./util/readPackageJson\"\n\nconst args: any = yargs\n  .option(\"arch\", {\n    choices: [\"ia32\", \"x64\", \"all\"],\n  }).argv\n\nconst projectDir = process.cwd()\nconst devPackageFile = path.join(projectDir, \"package.json\")\n\nasync function main() {\n  const devMetadata: DevMetadata = await readPackageJson(devPackageFile)\n  const results: Array<string> = await BluebirdPromise.all([\n    computeDefaultAppDirectory(projectDir, use(devMetadata.directories, it => it!.app)),\n    getElectronVersion(devMetadata, devPackageFile)\n  ])\n\n  if (results[0] === projectDir) {\n    throw new Error(\"install-app-deps is only useful for two package.json structure\")\n  }\n\n  await installDependencies(results[0], results[1], args.arch, devMetadata.build.npmSkipBuildFromSource !== true)\n}\n\nmain()\n  .catch(printErrorAndExit)"
  ]
}
