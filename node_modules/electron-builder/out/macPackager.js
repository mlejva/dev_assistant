"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _bluebirdLstC;

function _load_bluebirdLstC() {
    return _bluebirdLstC = require("bluebird-lst-c");
}

var _bluebirdLstC2;

function _load_bluebirdLstC2() {
    return _bluebirdLstC2 = _interopRequireDefault(require("bluebird-lst-c"));
}

var _platformPackager;

function _load_platformPackager() {
    return _platformPackager = require("./platformPackager");
}

var _metadata;

function _load_metadata() {
    return _metadata = require("./metadata");
}

var _path;

function _load_path() {
    return _path = _interopRequireWildcard(require("path"));
}

var _log;

function _load_log() {
    return _log = require("./util/log");
}

var _codeSign;

function _load_codeSign() {
    return _codeSign = require("./codeSign");
}

var _deepAssign;

function _load_deepAssign() {
    return _deepAssign = require("./util/deepAssign");
}

var _electronOsxSignTf;

function _load_electronOsxSignTf() {
    return _electronOsxSignTf = require("electron-osx-sign-tf");
}

var _dmg;

function _load_dmg() {
    return _dmg = require("./targets/dmg");
}

var _targetFactory;

function _load_targetFactory() {
    return _targetFactory = require("./targets/targetFactory");
}

var _appInfo;

function _load_appInfo() {
    return _appInfo = require("./appInfo");
}

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class MacPackager extends (_platformPackager || _load_platformPackager()).PlatformPackager {
    constructor(info) {
        super(info);
        if (this.options.cscLink == null || process.platform !== "darwin") {
            this.codeSigningInfo = (_bluebirdLstC2 || _load_bluebirdLstC2()).default.resolve({});
        } else {
            this.codeSigningInfo = (0, (_codeSign || _load_codeSign()).createKeychain)(info.tempDirManager, this.options.cscLink, this.getCscPassword(), this.options.cscInstallerLink, this.options.cscInstallerKeyPassword);
        }
    }
    prepareAppInfo(appInfo) {
        return new (_appInfo || _load_appInfo()).AppInfo(appInfo.metadata, this.devMetadata, this.platformSpecificBuildOptions.bundleVersion);
    }
    getIconPath() {
        var _this = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            let iconPath = _this.platformSpecificBuildOptions.icon || _this.devMetadata.build.icon;
            if (iconPath != null && !iconPath.endsWith(".icns")) {
                iconPath += ".icns";
            }
            return iconPath == null ? yield _this.getDefaultIcon("icns") : (_path || _load_path()).resolve(_this.projectDir, iconPath);
        })();
    }
    normalizePlatformSpecificBuildOptions(options) {
        return super.normalizePlatformSpecificBuildOptions(options == null ? this.info.devMetadata.build.osx : options);
    }
    createTargets(targets, mapper, cleanupTasks) {
        for (let name of targets) {
            if (name === "dir") {
                continue;
            }
            if (name === (_targetFactory || _load_targetFactory()).DEFAULT_TARGET) {
                mapper("dmg", () => new (_dmg || _load_dmg()).DmgTarget(this));
                mapper("zip", () => new (_platformPackager || _load_platformPackager()).Target("zip"));
            } else if (name === "dmg") {
                mapper("dmg", () => new (_dmg || _load_dmg()).DmgTarget(this));
            } else {
                mapper(name, () => name === "mas" ? new (_platformPackager || _load_platformPackager()).Target("mas") : (0, (_targetFactory || _load_targetFactory()).createCommonTarget)(name));
            }
        }
    }
    get platform() {
        return (_metadata || _load_metadata()).Platform.MAC;
    }
    pack(outDir, arch, targets, postAsyncTasks) {
        var _this2 = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            let nonMasPromise = null;
            const hasMas = targets.length !== 0 && targets.some(function (it) {
                return it.name === "mas";
            });
            if (!hasMas || targets.length > 1) {
                const appOutDir = _this2.computeAppOutDir(outDir, arch);
                nonMasPromise = _this2.doPack(outDir, appOutDir, _this2.platform.nodeName, arch, _this2.platformSpecificBuildOptions).then(function () {
                    return _this2.sign(appOutDir, null);
                }).then(function () {
                    _this2.packageInDistributableFormat(appOutDir, targets, postAsyncTasks);
                });
            }
            if (hasMas) {
                // osx-sign - disable warning
                const appOutDir = (_path || _load_path()).join(outDir, "mas");
                const masBuildOptions = (0, (_deepAssign || _load_deepAssign()).deepAssign)({}, _this2.platformSpecificBuildOptions, _this2.devMetadata.build.mas);
                //noinspection JSUnusedGlobalSymbols
                yield _this2.doPack(outDir, appOutDir, "mas", arch, masBuildOptions);
                yield _this2.sign(appOutDir, masBuildOptions);
            }
            if (nonMasPromise != null) {
                yield nonMasPromise;
            }
        })();
    }
    sign(appOutDir, masOptions) {
        var _this3 = this;

        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            if (process.platform !== "darwin") {
                (0, (_log || _load_log()).warn)("macOS application code signing is not supported on this platform, skipping.");
                return;
            }
            let keychainName = (yield _this3.codeSigningInfo).keychainName;
            const isMas = masOptions != null;
            const masQualifier = isMas ? masOptions.identity || _this3.platformSpecificBuildOptions.identity : null;
            let name = yield (0, (_codeSign || _load_codeSign()).findIdentity)(isMas ? "3rd Party Mac Developer Application" : "Developer ID Application", isMas ? masQualifier : _this3.platformSpecificBuildOptions.identity, keychainName);
            if (name == null) {
                if (!isMas) {
                    name = yield (0, (_codeSign || _load_codeSign()).findIdentity)("Mac Developer", _this3.platformSpecificBuildOptions.identity, keychainName);
                    if (name != null) {
                        (0, (_log || _load_log()).warn)("Mac Developer is used to sign app â€” it is only for development and testing, not for production");
                    }
                }
                if (name == null) {
                    let message = `App is not signed: cannot find valid ${ isMas ? '"3rd Party Mac Developer Application" identity' : `"Developer ID Application" identity or custom non-Apple code signing certificate` }, see https://github.com/electron-userland/electron-builder/wiki/Code-Signing`;
                    if (isMas) {
                        throw new Error(message);
                    } else {
                        (0, (_log || _load_log()).warn)(message);
                        return;
                    }
                }
            }
            let installerName = null;
            if (masOptions != null) {
                installerName = yield (0, (_codeSign || _load_codeSign()).findIdentity)("3rd Party Mac Developer Installer", masQualifier, keychainName);
                if (installerName == null) {
                    throw new Error('Cannot find valid "3rd Party Mac Developer Installer" identity to sign MAS installer, see https://github.com/electron-userland/electron-builder/wiki/Code-Signing');
                }
            }
            const baseSignOptions = {
                app: (_path || _load_path()).join(appOutDir, `${ _this3.appInfo.productFilename }.app`),
                platform: isMas ? "mas" : "darwin",
                keychain: keychainName || undefined,
                version: _this3.info.electronVersion
            };
            const signOptions = Object.assign({
                identity: name
            }, _this3.devMetadata.build["osx-sign"], baseSignOptions);
            const resourceList = yield _this3.resourceList;
            if (resourceList.indexOf(`entitlements.osx.plist`) !== -1) {
                throw new Error("entitlements.osx.plist is deprecated name, please use entitlements.mac.plist");
            }
            if (resourceList.indexOf(`entitlements.osx.inherit.plist`) !== -1) {
                throw new Error("entitlements.osx.inherit.plist is deprecated name, please use entitlements.mac.inherit.plist");
            }
            const customSignOptions = masOptions || _this3.platformSpecificBuildOptions;
            if (customSignOptions.entitlements != null) {
                signOptions.entitlements = customSignOptions.entitlements;
            } else {
                const p = `entitlements.${ isMas ? "mas" : "mac" }.plist`;
                if (resourceList.indexOf(p) !== -1) {
                    signOptions.entitlements = (_path || _load_path()).join(_this3.buildResourcesDir, p);
                }
            }
            if (customSignOptions.entitlementsInherit != null) {
                signOptions["entitlements-inherit"] = customSignOptions.entitlementsInherit;
            } else {
                const p = `entitlements.${ isMas ? "mas" : "mac" }.inherit.plist`;
                if (resourceList.indexOf(p) !== -1) {
                    signOptions["entitlements-inherit"] = (_path || _load_path()).join(_this3.buildResourcesDir, p);
                }
            }
            yield (0, (_log || _load_log()).task)(`Signing app (identity: ${ name })`, _this3.doSign(signOptions));
            if (masOptions != null) {
                yield (0, (_log || _load_log()).task)(`Signing app (identity: ${ name })`, _this3.doSign(signOptions));
                const pkg = (_path || _load_path()).join(appOutDir, `${ _this3.appInfo.productFilename }-${ _this3.appInfo.version }.pkg`);
                yield _this3.doFlat(Object.assign({
                    pkg: pkg,
                    identity: installerName
                }, baseSignOptions));
                _this3.dispatchArtifactCreated(pkg, `${ _this3.appInfo.name }-${ _this3.appInfo.version }.pkg`);
            }
        })();
    }
    //noinspection JSMethodCanBeStatic
    doSign(opts) {
        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            return (0, (_electronOsxSignTf || _load_electronOsxSignTf()).signAsync)(opts);
        })();
    }
    //noinspection JSMethodCanBeStatic
    doFlat(opts) {
        return (0, (_bluebirdLstC || _load_bluebirdLstC()).coroutine)(function* () {
            return (0, (_electronOsxSignTf || _load_electronOsxSignTf()).flatAsync)(opts);
        })();
    }
    packageInDistributableFormat(appOutDir, targets, promises) {
        for (let t of targets) {
            const target = t.name;
            if (t instanceof (_dmg || _load_dmg()).DmgTarget) {
                promises.push(t.build(appOutDir));
            } else if (target !== "mas") {
                (0, (_log || _load_log()).log)(`Creating MacOS ${ target }`);
                // we use app name here - see https://github.com/electron-userland/electron-builder/pull/204
                const outFile = (_path || _load_path()).join(appOutDir, this.generateName2(target, "mac", false));
                promises.push(this.archiveApp(target, appOutDir, outFile).then(() => this.dispatchArtifactCreated(outFile, this.generateName2(target, "mac", true))));
            }
        }
    }
}
exports.default = MacPackager; //# sourceMappingURL=macPackager.js.map