{
  "version": 3,
  "file": "macPackager.js",
  "sourceRoot": "",
  "sources": [
    "../src/macPackager.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { PlatformPackager, BuildInfo, Target } from \"./platformPackager\"\nimport { Platform, Arch } from \"./metadata\"\nimport { MasBuildOptions, MacOptions } from \"./options/macOptions\"\nimport * as path from \"path\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { log, warn, task } from \"./util/log\"\nimport { createKeychain, CodeSigningInfo, findIdentity } from \"./codeSign\"\nimport { deepAssign } from \"./util/deepAssign\"\nimport { signAsync, flatAsync, BaseSignOptions, SignOptions, FlatOptions } from \"electron-osx-sign-tf\"\nimport { DmgTarget } from \"./targets/dmg\"\nimport { createCommonTarget, DEFAULT_TARGET } from \"./targets/targetFactory\"\nimport { AppInfo } from \"./appInfo\"\n\nexport default class MacPackager extends PlatformPackager<MacOptions> {\n  codeSigningInfo: Promise<CodeSigningInfo>\n\n  constructor(info: BuildInfo) {\n    super(info)\n\n    if (this.options.cscLink == null || process.platform !== \"darwin\") {\n      this.codeSigningInfo = BluebirdPromise.resolve({})\n    }\n    else {\n      this.codeSigningInfo = createKeychain(info.tempDirManager, this.options.cscLink!, this.getCscPassword(), this.options.cscInstallerLink, this.options.cscInstallerKeyPassword)\n    }\n  }\n\n  protected prepareAppInfo(appInfo: AppInfo): AppInfo {\n    return new AppInfo(appInfo.metadata, this.devMetadata, this.platformSpecificBuildOptions.bundleVersion)\n  }\n\n  async getIconPath(): Promise<string | null> {\n    let iconPath = this.platformSpecificBuildOptions.icon || this.devMetadata.build.icon\n    if (iconPath != null && !iconPath.endsWith(\".icns\")) {\n      iconPath += \".icns\"\n    }\n    return iconPath == null ? await this.getDefaultIcon(\"icns\") : path.resolve(this.projectDir, iconPath)\n  }\n\n  normalizePlatformSpecificBuildOptions(options: MacOptions | n): MacOptions {\n    return super.normalizePlatformSpecificBuildOptions(options == null ? (<any>this.info.devMetadata.build).osx : options)\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: () => Target) => void, cleanupTasks: Array<() => Promise<any>>): void {\n    for (let name of targets) {\n      if (name === \"dir\") {\n        continue\n      }\n\n      if (name === DEFAULT_TARGET) {\n        mapper(\"dmg\", () => new DmgTarget(this))\n        mapper(\"zip\", () => new Target(\"zip\"))\n      }\n      else if (name === \"dmg\") {\n        mapper(\"dmg\", () => new DmgTarget(this))\n      }\n      else {\n        mapper(name, () => name === \"mas\" ? new Target(\"mas\") : createCommonTarget(name))\n      }\n    }\n  }\n\n  get platform() {\n    return Platform.MAC\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, postAsyncTasks: Array<Promise<any>>): Promise<any> {\n    let nonMasPromise: Promise<any> | null = null\n\n    const hasMas = targets.length !== 0 && targets.some(it => it.name === \"mas\")\n\n    if (!hasMas || targets.length > 1) {\n      const appOutDir = this.computeAppOutDir(outDir, arch)\n      nonMasPromise = this.doPack(outDir, appOutDir, this.platform.nodeName, arch, this.platformSpecificBuildOptions)\n        .then(() => this.sign(appOutDir, null))\n        .then(() => {\n          this.packageInDistributableFormat(appOutDir, targets, postAsyncTasks)\n        })\n    }\n\n    if (hasMas) {\n      // osx-sign - disable warning\n      const appOutDir = path.join(outDir, \"mas\")\n      const masBuildOptions = deepAssign({}, this.platformSpecificBuildOptions, (<any>this.devMetadata.build).mas)\n      //noinspection JSUnusedGlobalSymbols\n      await this.doPack(outDir, appOutDir, \"mas\", arch, masBuildOptions)\n      await this.sign(appOutDir, masBuildOptions)\n    }\n\n    if (nonMasPromise != null) {\n      await nonMasPromise\n    }\n  }\n\n  private async sign(appOutDir: string, masOptions: MasBuildOptions | null): Promise<void> {\n    if (process.platform !== \"darwin\") {\n      warn(\"macOS application code signing is not supported on this platform, skipping.\")\n      return\n    }\n\n    let keychainName = (await this.codeSigningInfo).keychainName\n    const isMas = masOptions != null\n    const masQualifier = isMas ? (masOptions!!.identity || this.platformSpecificBuildOptions.identity) : null\n\n    let name = await findIdentity(isMas ? \"3rd Party Mac Developer Application\" : \"Developer ID Application\", isMas ? masQualifier : this.platformSpecificBuildOptions.identity, keychainName)\n    if (name == null) {\n      if (!isMas) {\n        name = await findIdentity(\"Mac Developer\", this.platformSpecificBuildOptions.identity, keychainName)\n        if (name != null) {\n          warn(\"Mac Developer is used to sign app — it is only for development and testing, not for production\")\n        }\n      }\n\n      if (name == null) {\n        let message = `App is not signed: cannot find valid ${isMas ? '\"3rd Party Mac Developer Application\" identity' : `\"Developer ID Application\" identity or custom non-Apple code signing certificate`}, see https://github.com/electron-userland/electron-builder/wiki/Code-Signing`\n        if (isMas) {\n          throw new Error(message)\n        }\n        else {\n          warn(message)\n          return\n        }\n      }\n    }\n\n    let installerName: string | null = null\n    if (masOptions != null) {\n      installerName = await findIdentity(\"3rd Party Mac Developer Installer\", masQualifier, keychainName)\n      if (installerName == null) {\n        throw new Error('Cannot find valid \"3rd Party Mac Developer Installer\" identity to sign MAS installer, see https://github.com/electron-userland/electron-builder/wiki/Code-Signing')\n      }\n    }\n\n    const baseSignOptions: BaseSignOptions = {\n      app: path.join(appOutDir, `${this.appInfo.productFilename}.app`),\n      platform: isMas ? \"mas\" : \"darwin\",\n      keychain: keychainName || undefined,\n      version: this.info.electronVersion\n    }\n\n    const signOptions = Object.assign({\n      identity: name,\n    }, (<any>this.devMetadata.build)[\"osx-sign\"], baseSignOptions)\n\n    const resourceList = await this.resourceList\n    if (resourceList.includes(`entitlements.osx.plist`)) {\n      throw new Error(\"entitlements.osx.plist is deprecated name, please use entitlements.mac.plist\")\n    }\n    if (resourceList.includes(`entitlements.osx.inherit.plist`)) {\n      throw new Error(\"entitlements.osx.inherit.plist is deprecated name, please use entitlements.mac.inherit.plist\")\n    }\n\n    const customSignOptions = masOptions || this.platformSpecificBuildOptions\n    if (customSignOptions.entitlements != null) {\n      signOptions.entitlements = customSignOptions.entitlements\n    }\n    else {\n      const p = `entitlements.${isMas ? \"mas\" : \"mac\"}.plist`\n      if (resourceList.includes(p)) {\n        signOptions.entitlements = path.join(this.buildResourcesDir, p)\n      }\n    }\n\n    if (customSignOptions.entitlementsInherit != null) {\n      signOptions[\"entitlements-inherit\"] = customSignOptions.entitlementsInherit\n    }\n    else {\n      const p = `entitlements.${isMas ? \"mas\" : \"mac\"}.inherit.plist`\n      if (resourceList.includes(p)) {\n        signOptions[\"entitlements-inherit\"] = path.join(this.buildResourcesDir, p)\n      }\n    }\n\n    await task(`Signing app (identity: ${name})`, this.doSign(signOptions))\n\n    if (masOptions != null) {\n      await task(`Signing app (identity: ${name})`, this.doSign(signOptions))\n      const pkg = path.join(appOutDir, `${this.appInfo.productFilename}-${this.appInfo.version}.pkg`)\n      await this.doFlat(Object.assign({\n        pkg: pkg,\n        identity: installerName,\n      }, baseSignOptions))\n      this.dispatchArtifactCreated(pkg, `${this.appInfo.name}-${this.appInfo.version}.pkg`)\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doSign(opts: SignOptions): Promise<any> {\n    return signAsync(opts)\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doFlat(opts: FlatOptions): Promise<any> {\n    return flatAsync(opts)\n  }\n\n  protected packageInDistributableFormat(appOutDir: string, targets: Array<Target>, promises: Array<Promise<any>>): void {\n    for (let t of targets) {\n      const target = t.name\n      if (t instanceof DmgTarget) {\n        promises.push(t.build(appOutDir))\n      }\n      else if (target !== \"mas\") {\n        log(`Creating MacOS ${target}`)\n        // we use app name here - see https://github.com/electron-userland/electron-builder/pull/204\n        const outFile = path.join(appOutDir, this.generateName2(target, \"mac\", false))\n        promises.push(this.archiveApp(target, appOutDir, outFile)\n          .then(() => this.dispatchArtifactCreated(outFile, this.generateName2(target, \"mac\", true))))\n      }\n    }\n  }\n}"
  ]
}
