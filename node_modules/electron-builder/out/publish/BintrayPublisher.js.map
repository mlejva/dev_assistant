{
  "version": 3,
  "file": "BintrayPublisher.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/BintrayPublisher.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { Publisher, PublishOptions } from \"./publisher\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { HttpError, doApiRequest } from \"./restApiRequest\"\nimport { uploadFile } from \"./uploader\"\nimport { log } from \"../util/log\"\nimport { debug, isEmptyOrSpaces } from \"../util/util\"\nimport { basename } from \"path\"\nimport { stat } from \"fs-extra-p\"\nimport { BintrayClient, Version } from \"./bintray\"\nimport { BintrayOptions } from \"../options/publishOptions\"\n\nexport class BintrayPublisher implements Publisher {\n  private _versionPromise: BluebirdPromise<Version>\n\n  private readonly client: BintrayClient\n\n  constructor(info: BintrayOptions, private readonly version: string, private readonly options: PublishOptions = {}) {\n    let token = info.token\n    if (isEmptyOrSpaces(token)) {\n      token = process.env.BT_TOKEN\n      if (isEmptyOrSpaces(token)) {\n        throw new Error(`Bintray token is not set, neither programmatically, nor using env \"BT_TOKEN\"`)\n      }\n    }\n\n    this.client = new BintrayClient(info, token)\n    this._versionPromise = <BluebirdPromise<Version>>this.init()\n  }\n\n  private async init(): Promise<Version | null> {\n    try {\n      return await this.client.getVersion(this.version)\n    }\n    catch (e) {\n      if (e instanceof HttpError && e.response.statusCode === 404) {\n        if (this.options.publish !== \"onTagOrDraft\") {\n          log(`Version ${this.version} doesn't exist, creating one`)\n          return this.client.createVersion(this.version)\n        }\n        else {\n          log(`Version ${this.version} doesn't exist, artifacts will be not published`)\n        }\n      }\n\n      throw e\n    }\n  }\n\n  async upload(file: string, artifactName?: string): Promise<any> {\n    const fileName = artifactName || basename(file)\n    const version = await this._versionPromise\n    if (version == null) {\n      debug(`Version ${this.version} doesn't exist and is not created, artifact ${fileName} is not published`)\n      return\n    }\n\n    const fileStat = await stat(file)\n    let badGatewayCount = 0\n    for (let i = 0; i < 3; i++) {\n      try {\n        return await doApiRequest<any>({\n          hostname: \"api.bintray.com\",\n          path: `/content/${this.client.owner}/${this.client.repo}/${this.client.packageName}/${version.name}/${fileName}`,\n          method: \"PUT\",\n          headers: {\n            \"User-Agent\": \"electron-builder\",\n            \"Content-Length\": fileStat.size,\n            \"X-Bintray-Override\": \"1\",\n            \"X-Bintray-Publish\": \"1\",\n          }\n        }, this.client.auth, uploadFile.bind(this, file, fileStat, fileName))\n      }\n      catch (e) {\n        if (e instanceof HttpError && e.response.statusCode === 502 && badGatewayCount++ < 3) {\n            continue\n        }\n\n        throw e\n      }\n    }\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  deleteRelease(): Promise<any> {\n    if (!this._versionPromise.isFulfilled()) {\n      return BluebirdPromise.resolve()\n    }\n\n    const version = this._versionPromise.value()\n    return version == null ? BluebirdPromise.resolve() : this.client.deleteVersion(version.name)\n  }\n}"
  ]
}
